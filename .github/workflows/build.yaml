name: Pipelines

on:
  push:
    branches:    
      - development
#      - staging  # add as many environments as needed

#  schedule:  # assuming that scheduling is done by the build system
#    - cron: "0 6 * * *"  # run _main_ every day at 6am

jobs: 
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: build
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set branch specific variables
      run: |
        echo "::set-env name=BRANCH_SPECIFIC_SECRET_NAME::GOOGLE_CREDENTIALS_${GITHUB_REF#refs/heads/}"
        echo "::set-env name=BRANCH_SPECIFIC_PROJECT_NAME::GOOGLE_PROJECT_${GITHUB_REF#refs/heads/}"
    - name: GCP Login
      uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets[env.BRANCH_SPECIFIC_SECRET_NAME] }}
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
    - name: Generate pipeline resources
      run: ./add-pipelines.sh 
    - name: Terraform init
      run: terraform init
    - name: Terraform apply
      run: |
        terraform apply -auto-approve \
          -var="project=${{ secrets[env.BRANCH_SPECIFIC_PROJECT_NAME] }}" \
          -var-file="${GITHUB_REF#refs/heads/}.tfvars"
      env:
        GOOGLE_CREDENTIALS: ${{ secrets[env.BRANCH_SPECIFIC_SECRET_NAME] }}
    - name: Capture resource ids
      id: resources
      run: |
        CDAP_ENDPOINT=`terraform output -raw datafusion_endpoint`
        echo "::set-output name=cdap_endpoint::$CDAP_ENDPOINT"
    - name: Set up secure store and start pipelines
      run: ./start-pipelines.sh ${{ steps.resources.outputs.cdap_endpoint }}
    - name: Monitor pipelines
      run: ./monitor-pipelines.sh ${{ steps.resources.outputs.cdap_endpoint }}
    - name: Check if all pipelines successfully completed
      run: echo "Checking if all pipelines are completed, failing otherwise..."
    - name: Terraform destroy
      if: ${{ always() }}
      run: |
        terraform destroy -auto-approve \
          -var="project=${{ secrets[env.BRANCH_SPECIFIC_PROJECT_NAME] }}" \
          -var-file="${GITHUB_REF#refs/heads/}.tfvars"
      env:
        GOOGLE_CREDENTIALS: ${{ secrets[env.BRANCH_SPECIFIC_SECRET_NAME] }}


